maturity-index: Microbial maturity index prediction.
====================================================

.. raw:: html

   <div class="tabbed">
     <ul class="nav nav-tabs">
       <li class="active"><a data-toggle="tab" href="#cli">Command line interface</a></li>
       <li><a data-toggle="tab" href="#api">Artifact API</a></li>
     </ul>
     <div class="tab-content">
       <div id="cli" class="tab-pane fade in active">
         <pre>Usage: qiime sample-classifier maturity-index [OPTIONS]

     Calculates a "microbial maturity" index from a regression model trained on
     feature data to predict a given continuous metadata category, e.g., to
     predict age as a function of microbiota composition. The model is trained
     on a subset of control group samples, then predicts the category value for
     all samples. This visualization computes maturity index z-scores to
     compare relative "maturity" between each group, as described in
     doi:10.1038/nature13421. This method can be used to predict between-group
     differences in relative trajectory across any type of continuous metadata
     gradient, e.g., intestinal microbiome development by age, microbial
     succession during wine fermentation, or microbial community differences
     along environmental gradients, as a function of two or more different
     "treatment" groups.

   Options:
     --i-table PATH                  Artifact: FeatureTable[Frequency]
                                     [required]
                                     Feature table containing all
                                     features that should be used for target
                                     prediction.
     --m-metadata-file PATH          Metadata file or artifact viewable as
                                     metadata. This option may be supplied
                                     multiple times to merge metadata  [required]
                                     Sample metadata to use as prediction
                                     targets.
     --p-category TEXT               [required]
                                     Metadata category to use for
                                     training and prediction.
     --p-group-by TEXT               [required]
                                     Metadata category to use for
                                     plotting and significance testing between
                                     main treatment groups.
     --p-control TEXT                [required]
                                     Value of group_by to use as
                                     control group. The regression  model will be
                                     trained using only control group data, and
                                     the maturity scores of other groups
                                     consequently will be assessed relative to
                                     this group.
     --p-estimator [GradientBoostingRegressor|ElasticNet|Ridge|SVR|ExtraTreesRegressor|RandomForestRegressor|Lasso]
                                     [default: RandomForestRegressor]
                                     Regression
                                     model to use for prediction.
     --p-n-estimators INTEGER RANGE  [default: 100]
                                     Number of trees to grow for
                                     estimation. More trees will improve
                                     predictive accuracy up to a threshold level,
                                     but will also increase time and memory
                                     requirements. This parameter only affects
                                     ensemble estimators, such as Random Forest,
                                     AdaBoost, ExtraTrees, and GradientBoosting.
     --p-test-size FLOAT             [default: 0.2]
                                     Fraction of input samples to
                                     exclude from training set and use for
                                     classifier testing.
     --p-step FLOAT                  [default: 0.05]
                                     If
                                     optimize_feature_selection is True, step is
                                     the percentage of features to remove at each
                                     iteration.
     --p-cv INTEGER RANGE            [default: 5]
                                     Number of k-fold cross-
                                     validations to perform.
     --p-random-state INTEGER        [optional]
                                     Seed used by random number
                                     generator.
     --p-n-jobs INTEGER              [default: 1]
                                     Number of jobs to run in
                                     parallel.
     --p-parameter-tuning / --p-no-parameter-tuning
                                     [default: True]
                                     Automatically tune
                                     hyperparameters using random grid search.
     --p-optimize-feature-selection / --p-no-optimize-feature-selection
                                     [default: True]
                                     Automatically optimize input
                                     feature selection using recursive feature
                                     elimination.
     --p-stratify / --p-no-stratify  [default: False]
                                     Evenly stratify training
                                     and test data among metadata categories. If
                                     True, all values in category must match at
                                     least two samples.
     --p-maz-stats / --p-no-maz-stats
                                     [default: True]
                                     Calculate anova and pairwise
                                     tests on MAZ scores.
     --o-visualization PATH          Visualization [required if not passing
                                     --output-dir]
     --output-dir DIRECTORY          Output unspecified results to a directory
     --cmd-config PATH               Use config file for command options
     --verbose                       Display verbose output to stdout and/or
                                     stderr during execution of this action.
                                     [default: False]
     --quiet                         Silence output if execution is successful
                                     (silence is golden).  [default: False]
     --help                          Show this message and exit.</pre>
       </div>
       <div id="api" class="tab-pane fade">
         <pre>Microbial maturity index prediction.

   Calculates a "microbial maturity" index from a regression model trained on
   feature data to predict a given continuous metadata category, e.g., to
   predict age as a function of microbiota composition. The model is trained
   on a subset of control group samples, then predicts the category value for
   all samples. This visualization computes maturity index z-scores to compare
   relative "maturity" between each group, as described in
   doi:10.1038/nature13421. This method can be used to predict between-group
   differences in relative trajectory across any type of continuous metadata
   gradient, e.g., intestinal microbiome development by age, microbial
   succession during wine fermentation, or microbial community differences
   along environmental gradients, as a function of two or more different
   "treatment" groups.

   Parameters
   ----------
   table : FeatureTable[Frequency]
       Feature table containing all features that should be used for target
       prediction.
   metadata : Metadata
       Sample metadata to use as prediction targets.
   category : Str
       Metadata category to use for training and prediction.
   group_by : Str
       Metadata category to use for plotting and significance testing between
       main treatment groups.
   control : Str
       Value of group_by to use as control group. The regression  model will
       be trained using only control group data, and the maturity scores of
       other groups consequently will be assessed relative to this group.
   estimator : Str % Choices({'ElasticNet', 'ExtraTreesRegressor', 'GradientBoostingRegressor', 'Lasso', 'RandomForestRegressor', 'Ridge', 'SVR'}), optional
       Regression model to use for prediction.
   n_estimators : Int % Range(1), optional
       Number of trees to grow for estimation. More trees will improve
       predictive accuracy up to a threshold level, but will also increase
       time and memory requirements. This parameter only affects ensemble
       estimators, such as Random Forest, AdaBoost, ExtraTrees, and
       GradientBoosting.
   test_size : Float % Range(0.0, 1.0, inclusive_start=False), optional
       Fraction of input samples to exclude from training set and use for
       classifier testing.
   step : Float % Range(0.0, 1.0, inclusive_start=False), optional
       If optimize_feature_selection is True, step is the percentage of
       features to remove at each iteration.
   cv : Int % Range(1), optional
       Number of k-fold cross-validations to perform.
   random_state : Int, optional
       Seed used by random number generator.
   n_jobs : Int, optional
       Number of jobs to run in parallel.
   parameter_tuning : Bool, optional
       Automatically tune hyperparameters using random grid search.
   optimize_feature_selection : Bool, optional
       Automatically optimize input feature selection using recursive feature
       elimination.
   stratify : Bool, optional
       Evenly stratify training and test data among metadata categories. If
       True, all values in category must match at least two samples.
   maz_stats : Bool, optional
       Calculate anova and pairwise tests on MAZ scores.

   Returns
   -------
   visualization : Visualization</pre>
       </div>
     </div>
   </div>